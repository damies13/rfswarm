---
name: Publish

on: workflow_call

jobs:
  Publish_PIP:
    runs-on: ubuntu-latest
    # permissions:
    #   id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get Branch Name
        run: |
          branchname=$(git rev-parse --abbrev-ref HEAD)
          echo "branchname=$branchname" >> "$GITHUB_ENV"
      - name: Determine if this is a release branch
        run: |
          isrelease=0
          if [[ $branchname =~ v[0-9]\. ]]; then
            isrelease=1
          fi
          echo "isrelease=$isrelease" >> "$GITHUB_ENV"

      - name: Check Milestone
        if: ${{ env.isrelease == 1 }}
        shell: python
        # https://api.github.com/repos/damies13/rfswarm/milestones
        run: |
          import os
          import requests
          branchname = os.getenv("branchname")
          print("branchname:", branchname)
          milestonesresp = requests.get('https://api.github.com/repos/damies13/rfswarm/milestones')
          milestones = milestonesresp.json()
          dopublish = 0
          print('milestones:', milestones)
          for milestone in milestones:
            print('milestone:', milestone)
            ms = milestone
            print('title:', ms['title'])
            if ms['title'] == branchname:
              print(ms)
              open_issues = ms['open_issues']
              closed_issues = ms['closed_issues']
              total_issues = open_issues + closed_issues
              print('open', open_issues, 'closed', closed_issues, 'total', total_issues)
              pct = (closed_issues/total_issues) * 100
              print(pct, "%")
              if pct == 100:
                dopublish = 1
          print('dopublish', dopublish)
          env_file = os.getenv('GITHUB_ENV')
          with open(env_file, "a") as myfile:
            myfile.write("dopublish={}\n".format(dopublish))

      - name: Echo Vars
        run: |
          echo branchname: ${{ env.branchname }}
          echo isrelease: ${{ env.isrelease }}
          echo dopublish : ${{ env.dopublish }}
      - name: Apt Update
        if: ${{ env.dopublish == 1 }}
        run: |
          sudo apt update -y
      - name: Setup Python
        if: ${{ env.dopublish == 1 }}
        uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: PIP Install
        if: ${{ env.dopublish == 1 }}
        run: pip install --upgrade build setuptools twine wheel
      - name: Download packages to dist
        if: ${{ env.dopublish == 1 }}
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - name: Show Dist UM
        if: ${{ env.dopublish == 1 && matrix.platform != 'windows-latest' }}
        run: |
          ls -la dist
      - name: Show Dist W
        if: ${{ env.dopublish == 1 && matrix.platform == 'windows-latest' }}
        run: |
          dir dist

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      #   Having another go at auto publishing
      # https://github.com/pypa/gh-action-pypi-publish
      #
      # Trusted publishing cannot be used from within a reusable workflow at this time. It is recommended to instead create a non-reusable workflow that contains a job calling your reusable workflow, and then do the trusted publishing step from a separate job within that non-reusable workflow. Alternatively, you can still use a username/token inside the reusable workflow.
      #
      # workflow_call is classified as a reusable workflow, sees this will not work
      #
      # - name: Publish package to TestPyPI
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #       password: ${{ secrets.TEST_PYPI_TOKEN }}
      #       repository-url: https://test.pypi.org/legacy/
      #
      # - name: Do Publish
      #   if: ${{ env.dopublish == 1 }}
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #       password: ${{ secrets.PYPI_TOKEN }}
